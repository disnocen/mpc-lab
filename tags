!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/disnocen/pr/mpc-lab/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20220828.0/
C	ot.py	/^C = rand(num-1)$/;"	v
Intro	README.md	/^## Intro$/;"	s	chapter:MPC Lab
MPC Lab	README.md	/^# MPC Lab$/;"	c
NIOT	README.md	/^## NIOT$/;"	s	chapter:MPC Lab
X_card	main.py	/^    X_card = 5 # X={0...(X_card-1)}$/;"	v
X_keys	main.py	/^    X_keys = [ create_aes_key() for i in range(X_card)]$/;"	v
Y_card	main.py	/^    Y_card = 4 # Y={0...(Y_card-1)}$/;"	v
Y_keys	main.py	/^    Y_keys = [ create_aes_key() for i in range(Y_card)]$/;"	v
alice_pairs	ot_1_of_n_basic.py	/^    alice_pairs = create_pairs_from_strings(alice_strings)$/;"	v
alice_randoms	ot_1_of_n_basic.py	/^    alice_randoms = [rand(1) for i in range(t)]$/;"	v
alice_send_strings	ot.py	/^def alice_send_strings(string1, string2, bob_pub_key, mod = num):$/;"	f
alice_strings	ot_1_of_n_basic.py	/^    alice_strings = ["hello", "world", "I", "am", "Alice"]$/;"	v
alpha	ot.py	/^    alpha, xored = alice_send_strings(string1, string2, bob_pub_key)$/;"	v
bin_to_string	ot.py	/^def bin_to_string(binary):$/;"	f
bob_i	ot.py	/^    bob_i = rand(1)$/;"	v
bob_keys	ot_1_of_n_basic.py	/^    bob_keys = [gen_bob_keys(rand_int=alice_randoms[i]) for i in range(t)]$/;"	v
bob_priv_key	ot.py	/^    bob_priv_key, bob_pub_key = gen_bob_keys(i=bob_i)$/;"	v
bob_private_keys	ot_1_of_n_basic.py	/^    bob_private_keys = [bob_keys[i][0] for i in range(t)]$/;"	v
bob_pub_key	ot.py	/^    bob_priv_key, bob_pub_key = gen_bob_keys(i=bob_i)$/;"	v
bob_public_keys	ot_1_of_n_basic.py	/^    bob_public_keys = [bob_keys[i][1] for i in range(t)]$/;"	v
bob_receive_strings	ot.py	/^def bob_receive_strings(alpha, xored, priv_key, mod = num):$/;"	f
bob_send_pub_key	ot.py	/^def bob_send_pub_key(pub_key):$/;"	f
create_aes_key	main.py	/^def create_aes_key():$/;"	f
create_pairs_from_strings	ot_1_of_n_basic.py	/^def create_pairs_from_strings(strings):$/;"	f
debug	ot.py	/^debug = False$/;"	v
debug	ot_1_of_n_basic.py	/^debug = True$/;"	v
debug_print	ot.py	/^def debug_print(string, debug=debug):$/;"	f
double_encrypt	main.py	/^def double_encrypt(data,cipher1,cipher2):$/;"	f
encrypt	main.py	/^def encrypt(data, key):$/;"	f
encrypted_table	main.py	/^    encrypted_table = []$/;"	v
gen	ot.py	/^gen = 2$/;"	v
gen_bob_keys	ot.py	/^def gen_bob_keys(rand_int=C, i =0, mod = num):$/;"	f
inv	ot.py	/^def inv(a, m):$/;"	f
key_table	main.py	/^    key_table = []$/;"	v
m	ot_1_of_n_basic.py	/^    m = len(alice_strings)$/;"	v
num	ot.py	/^num = 2**128 - 2**97 - 1$/;"	v
num_to_bin	ot.py	/^def num_to_bin(num):$/;"	f
operation	main.py	/^    def operation(x=0,y=0):$/;"	f
power	ot.py	/^def power(x, y, p):$/;"	f
print_table	main.py	/^def print_table(table, var=""):$/;"	f
rand	ot.py	/^def rand(num):$/;"	f
string	ot.py	/^    string = bob_receive_strings(alpha, xored, bob_priv_key)$/;"	v
string1	ot.py	/^    string1 = "hello world"$/;"	v
string2	ot.py	/^    string2 = "goodbye world"$/;"	v
string_to_bin	ot.py	/^def string_to_bin(string):$/;"	f
t	ot_1_of_n_basic.py	/^    t = m\/\/2$/;"	v
table	main.py	/^    table = []$/;"	v
temp_vec	main.py	/^        temp_vec = []$/;"	v
to_bytes	main.py	/^def to_bytes(x):$/;"	f
xor	ot.py	/^def xor(a, b):$/;"	f
xored	ot.py	/^    alpha, xored = alice_send_strings(string1, string2, bob_pub_key)$/;"	v
